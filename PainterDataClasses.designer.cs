#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PainterMini
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PainterMiniDB")]
	public partial class PainterDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTblShape(TblShape instance);
    partial void UpdateTblShape(TblShape instance);
    partial void DeleteTblShape(TblShape instance);
    #endregion
		
		public PainterDataClassesDataContext() : 
				base(global::PainterMini.Properties.Settings.Default.PainterMiniDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PainterDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PainterDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PainterDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PainterDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TblShape> TblShapes
		{
			get
			{
				return this.GetTable<TblShape>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblShape")]
	public partial class TblShape : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShapeID;
		
		private string _ShapeType;
		
		private string _FillColor;
		
		private string _BorderColor;
		
		private System.Nullable<bool> _IsFilled;
		
		private string _ExtraData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShapeIDChanging(int value);
    partial void OnShapeIDChanged();
    partial void OnShapeTypeChanging(string value);
    partial void OnShapeTypeChanged();
    partial void OnFillColorChanging(string value);
    partial void OnFillColorChanged();
    partial void OnBorderColorChanging(string value);
    partial void OnBorderColorChanged();
    partial void OnIsFilledChanging(System.Nullable<bool> value);
    partial void OnIsFilledChanged();
    partial void OnExtraDataChanging(string value);
    partial void OnExtraDataChanged();
    #endregion
		
		public TblShape()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShapeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShapeID
		{
			get
			{
				return this._ShapeID;
			}
			set
			{
				if ((this._ShapeID != value))
				{
					this.OnShapeIDChanging(value);
					this.SendPropertyChanging();
					this._ShapeID = value;
					this.SendPropertyChanged("ShapeID");
					this.OnShapeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShapeType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ShapeType
		{
			get
			{
				return this._ShapeType;
			}
			set
			{
				if ((this._ShapeType != value))
				{
					this.OnShapeTypeChanging(value);
					this.SendPropertyChanging();
					this._ShapeType = value;
					this.SendPropertyChanged("ShapeType");
					this.OnShapeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FillColor", DbType="NVarChar(50)")]
		public string FillColor
		{
			get
			{
				return this._FillColor;
			}
			set
			{
				if ((this._FillColor != value))
				{
					this.OnFillColorChanging(value);
					this.SendPropertyChanging();
					this._FillColor = value;
					this.SendPropertyChanged("FillColor");
					this.OnFillColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BorderColor", DbType="NVarChar(50)")]
		public string BorderColor
		{
			get
			{
				return this._BorderColor;
			}
			set
			{
				if ((this._BorderColor != value))
				{
					this.OnBorderColorChanging(value);
					this.SendPropertyChanging();
					this._BorderColor = value;
					this.SendPropertyChanged("BorderColor");
					this.OnBorderColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFilled", DbType="Bit")]
		public System.Nullable<bool> IsFilled
		{
			get
			{
				return this._IsFilled;
			}
			set
			{
				if ((this._IsFilled != value))
				{
					this.OnIsFilledChanging(value);
					this.SendPropertyChanging();
					this._IsFilled = value;
					this.SendPropertyChanged("IsFilled");
					this.OnIsFilledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraData", DbType="NVarChar(MAX)")]
		public string ExtraData
		{
			get
			{
				return this._ExtraData;
			}
			set
			{
				if ((this._ExtraData != value))
				{
					this.OnExtraDataChanging(value);
					this.SendPropertyChanging();
					this._ExtraData = value;
					this.SendPropertyChanged("ExtraData");
					this.OnExtraDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
